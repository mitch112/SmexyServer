/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ShopEditor.java
 *
 * Created on Jun 28, 2011, 7:53:23 PM
 */
package org.dementhium.tools;

import org.dementhium.model.Container;
import org.dementhium.model.Item;
import org.dementhium.model.definition.ItemDefinition;
import org.dementhium.model.player.Shop;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel.MapMode;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Stephen
 */
@SuppressWarnings("unchecked")
public class ShopEditor extends javax.swing.JFrame {

	private static final long serialVersionUID = 4776594036924449465L;
	
	private DefaultListModel<Integer> defaultModel = new DefaultListModel<Integer>();
    private ArrayList<Shop> shops = new ArrayList<Shop>();

//neverused private Shop currentShop;
    @SuppressWarnings("rawtypes")
	Class[] types = new Class[]{
            java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
    };

    /**
     * Creates new form ShopEditor
     */
    public ShopEditor() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ShopEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ShopEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ShopEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ShopEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ItemDefinition.init();
        } catch (IOException e) {
            e.printStackTrace();
        }
        initComponents();
        load();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    @SuppressWarnings("rawtypes")
	private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dementhium Shop Editor");

        jList1.setModel(defaultModel);
        jList1.setToolTipText("Use the delete key on a selected shop to delete it");
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jList1.addKeyListener(new KeyListener() {

            @Override
            public void keyPressed(KeyEvent arg0) {
                // TODO Auto-generated method stub

            }

            @Override
            public void keyReleased(KeyEvent arg0) {
                if (arg0.getKeyCode() == KeyEvent.VK_DELETE) {
                    shops.remove(jList1.getSelectedIndex());
                    populateLists();
                } else if (arg0.getKeyCode() == KeyEvent.VK_R && arg0.isControlDown()) {
                    shops.get(jList1.getSelectedIndex()).setId(Integer.parseInt(JOptionPane.showInputDialog(ShopEditor.this, "Enter the new NPC ID")));
                    populateLists();
                }

            }

            @Override
            public void keyTyped(KeyEvent arg0) {
            }

        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel1.setText("Shops");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "", "Item ID", "Amount"
                }
        ) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 647065144242968074L;
			
			Class[] types = new Class[]{
                    java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean[]{
                    false, true, true
            };

            public Class<?> getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton1.setIcon(new javax.swing.ImageIcon(".\\data\\tools\\Add16.png")); // NOI18N
        jButton1.setToolTipText("Adds an item to the shop");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(".\\data\\tools\\Delete16.png")); // NOI18N
        jButton2.setToolTipText("Deletes the selected item");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(".\\data\\tools\\Save16.png")); // NOI18N
        jButton3.setToolTipText("Saves the shops file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(".\\data\\tools\\Add16.png")); // NOI18N
        jButton4.setToolTipText("Adds a shop to the list");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel2.setText("Shop info");

        jCheckBox1.setText("General Store");

        jMenu1.setText("File");

        jMenuItem1.setText("Dump shops");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton3))
                                        .addComponent(jLabel1)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                                .addComponent(jCheckBox1))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                        .addComponent(jLabel2))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jButton3)
                                                        .addComponent(jButton4)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jCheckBox1)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(jButton1)
                                                                .addComponent(jButton2)))))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void jCheckBox1ActionPerformed(ActionEvent evt) {
        shops.get((Integer) jList1.getSelectedIndex()).setGeneral(jCheckBox1.isSelected());
    }

    protected void jButton2ActionPerformed(ActionEvent evt) {
        Shop shop = shops.get((Integer) jList1.getSelectedIndex());
        for (int i = 0; i < jTable1.getSelectedRows().length; i++) {
            int index = jTable1.getSelectedRows()[i];
            shop.set(index, null);
        }
        reloadTable(shop.getShop());
    }

    protected void jButton3ActionPerformed(ActionEvent evt) {
        try {
            saveFile();
        } catch (IOException e) {
            //e.printStackTrace();
        }

    }

    private void saveFile() throws IOException {
        RandomAccessFile shopFile = new RandomAccessFile("data/shops.bin", "rw");
        shopFile.writeShort(shops.size());
        for (int shopId = 0; shopId < shops.size(); shopId++) {
            Shop s = shops.get(shopId);
            shopFile.writeShort(s.getId());
            shopFile.writeByte(s.getShop().getTakenSlots());
            shopFile.writeByte(s.isGeneralStore() ? 1 : 0);
            for (int item = 0; item < s.getShop().getTakenSlots(); item++) {
                shopFile.writeShort(s.getShop().get(item).getId());
                shopFile.writeInt(s.getShop().get(item).getAmount());
            }
        }
        shopFile.close();
        shops.clear();
        load();
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Shop shop = new Shop(Integer.parseInt(JOptionPane.showInputDialog("Enter NPC ID to use this shop")), 995, false, new int[]{1}, new int[]{1}, false);
        shops.add(shop);
        defaultModel.addElement(shop.getId());
        reloadTable(shop.getShop());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        shops.get((Integer) jList1.getSelectedIndex()).addItem(1, 1);
        reloadTable(shops.get((Integer) jList1.getSelectedIndex()).getShop());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (jList1.getSelectedIndex() > -1) {
            reloadTable(shops.get(jList1.getSelectedIndex()).getShop());
            jCheckBox1.setSelected(shops.get(jList1.getSelectedIndex()).isGeneralStore());

        }

    }//GEN-LAST:event_jList1ValueChanged


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ShopEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    @SuppressWarnings("rawtypes")
	private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void load() {
        try {
            RandomAccessFile shopFile = new RandomAccessFile("data/shops.bin", "r");
            ByteBuffer buffer = shopFile.getChannel().map(MapMode.READ_ONLY, 0, shopFile.getChannel().size());
            int shopsAmt = buffer.getShort();
            for (int i = 0; i < shopsAmt; i++) {
                int shopId = buffer.getShort();
                int[] items = new int[buffer.get()];
                int[] amounts = new int[items.length];
                boolean isGeneral = buffer.get() == 1;
                for (int itemData = 0; itemData < items.length; itemData++) {
                    items[itemData] = buffer.getShort();
                    amounts[itemData] = buffer.getInt();
                }
                 shops.add(new Shop(shopId, 995, isGeneral, items, amounts, false));
            }
            System.out.println("Loaded " + shops.size() + " Shops");
        } catch (IOException ex) {
            Logger.getLogger(ShopEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateLists();
    }

    private void populateLists() {
        defaultModel.clear();
        for (Shop i : shops) {
            defaultModel.addElement(i.getId());
        }
    }

    private void reloadTable(Container shop) {
        DefaultTableModel model = new DefaultTableModel() {
  
			private static final long serialVersionUID = 6981019053869473195L;

			public boolean isCellEditable(int rowIndex, int columnIndex) {
                return columnIndex > 0;
            }

            public Class<?> getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

        };
        model.addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                try {
                    if (e.getColumn() != -1 && e.getColumn() != 0) {
                        shops.get(jList1.getSelectedIndex()).set(jTable1.getSelectedRow(), new Item((Integer) jTable1.getValueAt(jTable1.getSelectedRow(), 1), (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), 2)));
                    }
                } catch (Exception f) {
                    f.printStackTrace();
                }
            }

        });
        model.addColumn("");
        model.addColumn("Item ID");
        model.addColumn("Amount");
        if (shop != null) {
            for (int i = 0; i < shop.toArray().length; i++) {
                if (shop.get(i) != null)
                    model.addRow(new Object[]{i, shop.get(i).getId(), shop.get(i).getAmount()});
            }
        }
        jTable1.setModel(model);
    }

}